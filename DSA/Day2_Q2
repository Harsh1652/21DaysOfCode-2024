import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.TreeSet;

/*

Question 2:
A player is climbing a leaderboard where scores are ranked in descending order. Given the scores on the leaderboard and the player's scores in the game, determine the player's rank after each new score.
Inputs:

An array of integers representing the leaderboard scores.
An array of integers representing the player's scores. Output:
An array of integers representing the player's rank after each new score.
Example:

leaderboard = [100, 90, 90, 80]

player_scores = [70, 80, 105]

Output: [4, 3, 1]

 */
public class Day2_Q2 {
    public static int[] climbingLeaderboard(int[] scores, int[] playerScores) {
        // Use a TreeSet to store unique scores in descending order
        TreeSet<Integer> uniqueScores = new TreeSet<>(Collections.reverseOrder());
        for (int score : scores) {
            uniqueScores.add(score);
        }

        // Convert the TreeSet to a list for easier indexing
        List<Integer> sortedUniqueScores = new ArrayList<>(uniqueScores);

        int[] result = new int[playerScores.length];
        int rankIndex = sortedUniqueScores.size() - 1;

        for (int i = 0; i < playerScores.length; i++) {
            while (rankIndex >= 0 && playerScores[i] >= sortedUniqueScores.get(rankIndex)) {
                rankIndex--;
            }
            result[i] = rankIndex + 2;
        }

        return result;

    }

}
